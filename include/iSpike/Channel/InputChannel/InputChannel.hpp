#ifndef INPUTCHANNEL_H_
#define INPUTCHANNEL_H_

#include <boost/scoped_ptr.hpp>
#include <string>
#include <vector>
#include <iSpike/Channel/Channel.hpp>
#include <iSpike/Channel/InputChannel/InputChannelDescription.hpp>
#include <boost/thread/condition.hpp>
#include <boost/thread/mutex.hpp>

namespace ispike {

	/**
	 * This class represents a directed Channel from a signal source (eg vision)
	 * to a spike output, so spikes can be read from this channel
	 */
	class InputChannel : public Channel {
		protected:
			boost::scoped_ptr<InputChannelDescription> channelDescription;

		public:
			InputChannel() : Channel() {}
			virtual ~InputChannel();
			InputChannelDescription getChannelDescription() { return *(channelDescription); }

			/*! Returns the spikes generated by the channel */
			virtual vector< vector<int> >& getFiring() = 0;
	};

}

#endif /* INPUTCHANNEL_H_ */
