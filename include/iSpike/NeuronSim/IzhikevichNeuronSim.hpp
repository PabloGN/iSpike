#ifndef IZHIKEVICHNEURONSIM_HPP_
#define IZHIKEVICHNEURONSIM_HPP_

#include <vector>
#include <stdlib.h>

namespace ispike {

	/** Neuron simulator using the Izhikevich model of neurons */
	class IzhikevichNeuronSim {

		public:
			IzhikevichNeuronSim();
			IzhikevichNeuronSim(size_t numNeurons, double a, double b, double c, double d);
			const std::vector<unsigned>& getSpikes() { return spikeVector; }
			void step();
			void setInputCurrent(unsigned index, double current);
			void setParameterA(double a){ this->aParam = a; }
			void setParameterB(double b){ this->bParam = b; }
			void setParameterC(double c){ this->cParam = c; }
			void setParameterD(double d){ this->dParam = d; }
			void initialize(size_t numNeurons);

		private:

			/** Holds the spikes generated by the neurons during the current time step */
			std::vector<unsigned> spikeVector;

			/** Number of neurons in simulator */
			size_t numNeurons;

			//Izhikevich parameters
			double aParam;
			double bParam;
			double cParam;
			double dParam;

			//Data structures for simulation
			std::vector<double> vArray;
			std::vector<double> uArray;
			std::vector<double> iArray;
			std::vector<bool> firedArray;

			/** Records whether simulator has been initialized */
			bool initialized;
	};

}


#endif /* IZHIKEVICHNEURONSIM_HPP_ */
