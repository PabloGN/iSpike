#ifndef IZHIKEVICHNEURONSIM_HPP_
#define IZHIKEVICHNEURONSIM_HPP_

//Other includes
#include <vector>
using namespace std;

namespace ispike {

	/** Neuron simulator using the Izhikevich model of neurons */
	class IzhikevichNeuronSim {
		public:
			IzhikevichNeuronSim();
			IzhikevichNeuronSim(int numNeurons, float a, float b, float c, float d);
			~IzhikevichNeuronSim();
			vector<int>& getSpikes() { return spikeVector; }
			void step();
			void initialize(int numNeurons);
			bool isInitialized() { return initialized; }
			void setInputCurrent(int index, float current);
			void setParameterA(float a){ this->a = a; }
			void setParameterB(float b){ this->b = b; }
			void setParameterC(float c){ this->c = c; }
			void setParameterD(float d){ this->d = d; }


		private:
			/** Holds the spikes generated by the neurons during the current time step */
			vector<int> spikeVector;

			/** Number of neurons in simulator */
			int numNeurons;

			//Izhikevich parameters
			float a;
			float b;
			float c;
			float d;

			//Data structures for simulation
			float* vArray;
			float* uArray;
			bool* firedArray;

			/** Factor by which incoming current is multiplied */
			float currentFactor;

			/** Constant current injected into the neurons at each time step */
			float constantCurrent;

			/** Records whether simulator has been initialized */
			bool initialized;

	};

}


#endif /* IZHIKEVICHNEURONSIM_HPP_ */
