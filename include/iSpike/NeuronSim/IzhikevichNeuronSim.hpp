#ifndef IZHIKEVICHNEURONSIM_HPP_
#define IZHIKEVICHNEURONSIM_HPP_

#include <vector>

namespace ispike {

	/** Neuron simulator using the Izhikevich model of neurons */
	class IzhikevichNeuronSim {

		public:
			IzhikevichNeuronSim();
			IzhikevichNeuronSim(size_t numNeurons, float a, float b, float c, float d);
			const std::vector<unsigned>& getSpikes() { return spikeVector; }
			void step();
			void setInputCurrent(int index, float current);
			void setParameterA(float a){ this->aParam = a; }
			void setParameterB(float b){ this->bParam = b; }
			void setParameterC(float c){ this->cParam = c; }
			void setParameterD(float d){ this->dParam = d; }
			void initialize(size_t numNeurons);

		private:

			/** Holds the spikes generated by the neurons during the current time step */
			std::vector<unsigned> spikeVector;

			/** Number of neurons in simulator */
			size_t numNeurons;

			//Izhikevich parameters
			float aParam;
			float bParam;
			float cParam;
			float dParam;

			//Data structures for simulation
			std::vector<float> vArray;
			std::vector<float> uArray;
			std::vector<float> iArray;
			std::vector<bool> firedArray;

			/** Records whether simulator has been initialized */
			bool initialized;
	};

}


#endif /* IZHIKEVICHNEURONSIM_HPP_ */
